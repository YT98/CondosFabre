{
  "_from": "react-tooltip",
  "_id": "react-tooltip@3.9.0",
  "_inBundle": false,
  "_integrity": "sha512-vpn738FVv2oe2LzdwUchped3WqLgZSQwrBow+ceChS1+lFEJBPjOa9KD3JH/L/s0Aorxawi3A20qBcHX7vqaag==",
  "_location": "/react-tooltip",
  "_phantomChildren": {},
  "_requested": {
    "escapedName": "react-tooltip",
    "fetchSpec": "latest",
    "name": "react-tooltip",
    "raw": "react-tooltip",
    "rawSpec": "",
    "registry": true,
    "saveSpec": null,
    "type": "tag"
  },
  "_requiredBy": [
    "#USER",
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/react-tooltip/-/react-tooltip-3.9.0.tgz",
  "_shasum": "d874df922c3b34b2e547ec62ff8b2eef42017b51",
  "_shrinkwrap": null,
  "_spec": "react-tooltip",
  "_where": "/Users/yannis/Prog/Projects/fabre",
  "author": {
    "name": "wwayne"
  },
  "browserify-shim": {
    "react": "global:React",
    "react-dom": "global:ReactDOM"
  },
  "bugs": {
    "url": "https://github.com/wwayne/react-tooltip/issues"
  },
  "bundleDependencies": false,
  "config": {
    "commitizen": {
      "path": "node_modules/cz-conventional-changelog"
    }
  },
  "dependencies": {
    "classnames": "^2.2.5",
    "prop-types": "^15.6.0",
    "sanitize-html-react": "^1.13.0"
  },
  "deprecated": false,
  "description": "react tooltip component",
  "devDependencies": {
    "babel-cli": "^6.5.1",
    "babel-core": "^6.9.1",
    "babel-eslint": "^4.1.1",
    "babel-plugin-transform-decorators-legacy": "^1.3.4",
    "babel-plugin-transform-runtime": "^6.5.0",
    "babel-preset-es2015": "^6.5.0",
    "babel-preset-react": "^6.5.0",
    "babel-preset-stage-0": "^6.5.0",
    "babelify": "^7.2.0",
    "browserify": "^13.0.0",
    "browserify-shim": "^3.8.12",
    "chai": "^3.5.0",
    "chai-enzyme": "^0.5.0",
    "commitizen": "2.9.6",
    "concurrently": "^2.1.0",
    "cz-conventional-changelog": "2.1.0",
    "enzyme": "^2.3.0",
    "enzyme-adapter-react-16": "^1.0.1",
    "gh-pages": "1.1.0",
    "github-changes": "^1.1.2",
    "http-server": "^0.11.1",
    "jsdom": "^9.2.1",
    "mocha": "^5.2.0",
    "node-sass": "^3.7.0",
    "react": "^16.1.1",
    "react-addons-test-utils": "^15.1.0",
    "react-dom": "^16.1.1",
    "semantic-release": "15.1.5",
    "sinon": "^1.17.4",
    "snazzy": "^2.0.1",
    "standard": "^5.2.2",
    "uglifyjs": "^2.4.10",
    "watchify": "^3.11.0"
  },
  "engines": {
    "node": ">=4.2.1"
  },
  "homepage": "https://github.com/wwayne/react-tooltip",
  "keywords": [
    "react",
    "react-component",
    "react-tooltip",
    "tooltip"
  ],
  "license": "MIT",
  "main": "dist/index.js",
  "name": "react-tooltip",
  "optionalDependencies": {},
  "peerDependencies": {
    "react": ">=0.14",
    "react-dom": ">=0.14"
  },
  "readme": "# react-tooltip\n[![Version](http://img.shields.io/npm/v/react-tooltip.svg)](https://www.npmjs.org/package/react-tooltip)\n[![js-standard-style](https://img.shields.io/badge/code%20style-standard-brightgreen.svg?style=flat)](https://github.com/feross/standard)\n[![npm download][download-image]][download-url]\n[![Build Status](https://travis-ci.org/wwayne/react-tooltip.svg?branch=master)](https://travis-ci.org/wwayne/react-tooltip)\n\n[download-image]: https://img.shields.io/npm/dm/react-tooltip.svg?style=flat-square\n[download-url]: https://npmjs.org/package/react-tooltip\n\n## Maintainers\n\n[huumanoid](https://github.com/huumanoid)\n\n[aronhelser](https://github.com/aronhelser)\n\n## Installation\n\n```sh\nnpm install react-tooltip\n```\n\n## Usage\n**Using NPM**\n\n1 . Require react-tooltip after installation\n\n```js\nimport ReactTooltip from 'react-tooltip'\n```\n\n2 . Add data-tip = \"your placeholder\" to your element\n```jsx\n<p data-tip=\"hello world\">Tooltip</p>\n```\n\n3 . Include react-tooltip component\n\n\n```js\n<ReactTooltip />\n```\n\n**Standalone**\n\nYou can import `node_modules/react-tooltip/standalone/react-tooltip.min.js` into your page. Please make sure that you have already imported `react` and `react-dom` into your page.\n\n## Options\nNotes:\n* The tooltip sets `type: dark` `place: top` `effect: float` as **default** attributes. You don't have to add these options if you don't want to change the defaults\n* The option you set on `<ReactTooltip />` component will be implemented on every tooltip in a same page: `<ReactTooltip effect=\"solid\" />`\n* The option you set on a specific element, for example: `<a data-type=\"warning\"></a>` will only affect this specific tooltip\n\nCheck example:  [React-tooltip Test](http://wwayne.com/react-tooltip)\n\nGlobal|Specific\t|Type\t|Values  |  Description\n|:---|:---|:---|:---|:----\n place\t|   data-place  |  String  |  top, right, bottom, left | placement\n type\t|   data-type  |  String  |  success, warning, error, info, light | theme\n effect|   data-effect  |  String  |  float, solid | behaviour of tooltip\n event |   data-event  |  String  |  e.g. click | custom event to trigger tooltip\n eventOff |   data-event-off  |  String  |  e.g. click | custom event to hide tooltip (only makes effect after setting event attribute)\n globalEventOff | | String| e.g. click| global event to hide tooltip (global only)\n isCapture | data-iscapture | Bool | true, false | when set to true, custom event's propagation mode will be capture\n offset\t|   data-offset  |  Object  |  top, right, bottom, left | `data-offset=\"{'top': 10, 'left': 10}\"` for specific and `offset={{top: 10, left: 10}}` for global\nmultiline\t|   data-multiline  |  Bool  |  true, false | support `<br>`, `<br />` to make multiline\nclassName\t|   data-class  |  String  |   | extra custom class, can use !important to overwrite react-tooltip's default class\n html\t|   data-html  |  Bool  |  true, false  |  `<p data-tip=\"<p>HTML tooltip</p>\" data-html={true}></p>` or `<ReactTooltip html={true} />`\n delayHide\t|   data-delay-hide  |  Number  |   | `<p data-tip=\"tooltip\" data-delay-hide='1000'></p>` or `<ReactTooltip delayHide={1000} />`\n delayShow\t|   data-delay-show  |  Number  |   | `<p data-tip=\"tooltip\" data-delay-show='1000'></p>` or `<ReactTooltip delayShow={1000} />`\n delayUpdate\t|   data-delay-update |  Number  |   | `<p data-tip=\"tooltip\" data-delay-update='1000'></p>` or `<ReactTooltip delayUpdate={1000} />` Sets a delay in calling getContent if the tooltip is already shown and you mouse over another target  \n insecure | null | Bool | true, false | Whether to inject the style header into the page dynamically (violates CSP style-src but is a convenient default)\n border  |   data-border  |  Bool  |  true, false | Add one pixel white border\n getContent | null | Func or Array | (dataTip) => {}, [(dataTip) => {}, Interval] | Generate the tip content dynamically\n afterShow | null | Func | () => {} | Function that will be called after tooltip show\n afterHide | null | Func | () => {} | Function that will be called after tooltip hide\n disable | data-tip-disable | Bool | true, false | Disable the tooltip behaviour, default is false\n scrollHide | data-scroll-hide | Bool | true, false | Hide the tooltip when scrolling, default is true\n resizeHide | null | Bool | true, false | Hide the tooltip when resizing the window, default is true\n wrapper | null | String | div, span | Selecting the wrapper element of the react tooltip, default is div\n\n## Using react component as tooltip\nCheck the example [React-tooltip Test](http://wwayne.com/react-tooltip)\n\n##### Note:\n1. **data-tip** is necessary, because `<ReactTooltip />` finds the tooltip via this attribute\n2. **data-for** corresponds to the **id** of `<ReactTooltip />`\n3. When using react component as tooltip, you can have many `<ReactTooltip />` in a page but they should have different **id**s\n\n## Static Methods\n### ReactTooltip.hide(target)\n\n> Hide the tooltip manually, the target is optional, if no target passed in, all existing tooltips will be hidden\n\n```js\nimport {findDOMNode} from 'react-dom'\nimport ReactTooltip from 'react-tooltip'\n\n<p ref='foo' data-tip='tooltip'></p>\n<button onClick={() => { ReactTooltip.hide(findDOMNode(this.refs.foo)) }}></button>\n<ReactTooltip />\n```\n\n### ReactTooltip.rebuild()\n\n> Rebinding all tooltips\n\n### ReactTooltip.show(target)\n\n> Show specific tooltip manually, for example:\n\n```js\nimport {findDOMNode} from 'react-dom'\nimport ReactTooltip from 'react-tooltip'\n\n<p ref='foo' data-tip='tooltip'></p>\n<button onClick={() => { ReactTooltip.show(findDOMNode(this.refs.foo)) }}></button>\n<ReactTooltip />\n```\n\n## Troubleshooting\n### 1. Using tooltip within the modal (e.g. [react-modal](https://github.com/reactjs/react-modal))\nThe component was designed to set `<ReactTooltip />` once and then use tooltip everywhere, but a lot of people get stuck when using this component in a modal. You can read the discussion [here](https://github.com/wwayne/react-tooltip/issues/130). To solve this problem:\n\n1. Place `<ReactTooltip />` outside of the `<Modal>`\n2. Use `ReactTooltip.rebuild()` when opening the modal\n3. If your modal's z-index happens to be higher than the tooltip's, use the attribute `className` to custom your tooltip's z-index\n\n>I suggest always putting `<ReactTooltip />` in the Highest level or smart component of Redux, so you might need these static\nmethod to control tooltip's behaviour in some situations\n\n### 2. Hide tooltip when getContent returns undefined\nWhen you set `getContent={() => { return }}` you will find the tooltip will display `true`. That's because React will set the value of data-* to be 'true' automatically if there is no value to be set. So you have to set `data-tip=''` in this situation.\n\n```jsx\n<p data-tip='' data-for='test'></p>\n<ReactTooltip id='test' getContent={() => { return null }}/>\n```\n\nSame for empty children, if you don't want show the tooltip when the children is empty\n\n```jsx\n<p data-tip='' data-for='test'></p>\n<ReactTooltip id='test'>{}</ReactTooltip>\n```\n\n## Article\n[How I insert sass into react component](https://medium.com/@wwayne_me/how-i-insert-sass-into-my-npm-react-component-b46b9811c226#.gi4hxu44a)\n\n## Contributing\n\nWe welcome your contribution! Fork the repo, make some changes, submit a pull-request! Our [contributing](contributing.md) doc has some details.\n\n## License\n\nMIT\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/wwayne/react-tooltip.git"
  },
  "scripts": {
    "build": "make deploy",
    "commit": "git cz",
    "deploy": "make deploy",
    "gh-pages": "gh-pages -d example",
    "github-changes": "github-changes -o wwayne -r react-tooltip -a --only-pulls --use-commit-body",
    "semantic-release": "semantic-release",
    "start": "make dev",
    "test": "make lint"
  },
  "standard": {
    "ignore": [
      "dist/",
      "example/",
      "src/style.css",
      "src/style.js",
      "standalone/"
    ],
    "parser": "babel-eslint"
  },
  "version": "3.9.0"
}
